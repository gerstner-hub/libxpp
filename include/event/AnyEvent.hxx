#pragma once

// xpp
#include <xpp/Event.hxx>

namespace xpp {

/// Wrapper around the base fields common to all X event structures.
class AnyEvent {
public: // functions

	explicit AnyEvent(const Event &ev) :
		m_any{ev.toAnyEvent()} {
	}

	/// The window the event is about.
	WinID window() const {
		return WinID{m_any.window};
	}

	EventType type() const { return EventType{m_any.type}; }

	/// If `true` then the event came from a SendEvent request (generated by another client).
	bool isFromSendEvent() const { return m_any.send_event == True; }

	/// Returns the raw pointer to the display this event was received on.
	/**
	 * You can use XDisplay::sameDisplay() to determine whether the event
	 * originated from a specific XDisplay instance.
	 **/
	const Display* display() const { return m_any.display; }

	/// Returns the #number of the last request processed by the server.
	unsigned long serial() const { return m_any.serial; }

protected: // functions

	explicit AnyEvent(const XAnyEvent &ev) :
		m_any{ev} {
	}

protected: // data
	const XAnyEvent &m_any;
};

} // end ns
