Import('env')

libenv = env.Clone()
libxpp_srcs = env.GatherSources(suffixes=[".cxx"])
public_includes = Dir(".").srcnode().abspath + "/../include"
libenv.Append(CPPPATH = public_includes)
# automatically include the export header to create less noise
libenv.Append(CCFLAGS = ["-include", "X++/dso_export.h"])
libenv.Append(CPPPATH=["."])
libenv.ConfigureForLibOrPackage('libcosmos', libxpp_srcs)
libenv.ConfigureForPackage("x11")


if env['libtype'] == 'static':
    libxpp = libenv.StaticLibrary(
        "X++",
        libxpp_srcs
    )
else:

    libenv.Append(CCFLAGS="-fvisibility=hidden")
    libenv.Append(CCFLAGS="-DXPP_EXPORT")

    # see libcosmos/src/SConstruct about this ABI stuff

    libxpp = libenv.SharedLibrary(
        "X++",
        libxpp_srcs,
        SHLIBVERSION="0.1.0",
        SONAME="libX++.so.0"
    )

env.RegisterLibConfig('libX++', libxpp, {
        "CCFLAGS": ["-DXPP_API="],
        "CPPPATH": [public_includes]
    },
    config = {"pkgs": ["x11"]}
)

Return('env')
