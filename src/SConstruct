Import('env')

libenv = env.Clone()
libxpp_srcs = env.GatherSources(suffixes=['.cxx'])
public_includes = Dir('.').srcnode().abspath + '/../include'
libenv.Append(CPPPATH=public_includes)
# automatically include the export header to create less noise
libenv.Append(CCFLAGS=['-include', 'xpp/dso_export.h'])
libenv.Append(CPPPATH=['.'])
libenv.ConfigureForLibOrPackage('libcosmos', libxpp_srcs)
libenv.ConfigureForPackage('x11')

version, soname, tag = libenv.GetSharedLibVersionInfo('libxpp')
libenv.AddVersionFileTarget('libxpp', tag)

if env['libtype'] == 'static':
    libxpp = libenv.StaticLibrary(
        'xpp',
        libxpp_srcs
    )
else:

    libenv.Append(CCFLAGS='-fvisibility=hidden')
    libenv.Append(CCFLAGS='-DXPP_EXPORT')

    # see libcosmos/src/SConstruct about this ABI stuff

    libxpp = libenv.SharedLibrary(
        'xpp',
        libxpp_srcs,
        SHLIBVERSION=version,
        SONAME=soname
    )

env.RegisterLibConfig(
    'libxpp',
    libxpp,
    {
        'CCFLAGS': ['-DXPP_API='],
        'CPPPATH': [public_includes]
    },
    config={
        'pkgs': ['x11'],
        'version': version
    }
)

Return('env')
